@model  GetLabourManager.Models.GangSheetHeader

@{
    ViewBag.Title = "GANG ADVICE DETAILS";
}

<div id="koserver" style="margin-top:-12px;" class="ui  blue segment">
    @Html.HiddenFor(x=>x.Id)
    @*<div class="ui pointing secondary menu">
        <a class="active item" data-tab="GANG ADVICE"></a>
        <a class="item" data-tab="second"></a>
    </div>*@
    <div class="ui bottom  attached tab segment active" data-tab="GANG ADVICE">
        <div id="frmadvice" class="ui small compact form">
            <div class="four fields">
                <div class="field">
                    <label>REQUEST CODE</label>
                    @Html.TextBoxFor(x=>x.RequestCode, new { @readonly = "" })
                </div>

                <div class="field">
                    <label>REQUEST DATE</label>
                    @Html.TextBoxFor(x=>x.DateIssued, new { @readonly = "" })
                </div>
                <div class="six wide field">
                    <label>CLIENT</label>
                    @Html.DropDownList("FieldClient", (IEnumerable<SelectListItem>)ViewBag.VClients,
                   new { @class = "ui cl dropdown disabled" })
                </div>
                <div class="field">
                    <label>GANG</label>
                    @Html.DropDownListFor(x=>x.GangCode,(IEnumerable<SelectListItem>)ViewBag.VGangs,
                   new { @class = "ui g dropdown disabled" })
                </div>
            </div>
      
            <table id="tablex" data-search="true" data-show-refresh="true" data-striped="true"
                   data-pagination="true" data-pagesize="5"
                   data-classes="table table-hover table-condensed table-striped table-responsive"
                   data-pagenumber="1" data-sidePagination="true"></table>
      
            <table class="table table-condensed table-striped">
                <tr>
                    <th></th>
                    <th class="text-right">ENTRIES</th>
                    <th></th>
                </tr>
                <tbody>
                    <tr>
                        <td style="width:500px;">
                            <div class="field ">
                                <div class="fluid ui primary  buttons">
                                    <div id="btnTask" class="ui positive button">
                                        TASK
                                    </div>
                                    <div id="btnTaskMenu" class="ui combo bottom right pointing dropdown icon button">
                                        <i class="dropdown icon pull-right"></i>
                                        <div class="menu upward">
                                            <div data-bind="click:IndexView" class="item"><i class="backward icon"></i> BACK TO LIST</div>
                                            <div data-bind="click:Reset" class="item"><i class="refresh icon"></i> RESET</div>
                                            <div data-bind="click:LoadEmployee" class="item"><i class="plus icon"></i> ADD NEW ENTRIES</div>
                                            <div data-bind="click:RemoveSelectedItem" class="item"><i class="remove icon"></i> REMOVE SELECTED ENTRIES</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </td>
                        <td class="col-xs-4 text-right ui small form">
                            <input class="text-right" type="text" readonly="readonly" data-bind="value: TotalEntries" />
                        </td>
                        <td>
                            <i id="pMessage" class="fa fa-circle-o-notch fa-spin fa-3x fa-fw"></i>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    <div class="ui bottom attached tab segment">
        <div style="margin-top:0px;" class="ui basic staff modal">
            <div class="ui icon header"></div>
            <div id="vml" class="content">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <i class="search icon"></i> SEARCH CASUALS
                        <div style="margin-top:-10px;" class="pull-right">
                            <button id="btnAdd" data-bind="click:AddCasualToGangRequest" class="ui positive button">
                                <i class="fa fa-plus"></i> ADD TO GANG REQUEST
                            </button>
                            &nbsp;
                            <button id="btnCancel" class="ui default button">
                                <i class="fa fa-plus"></i> CANCEL
                            </button>
                        </div>
                    </div>
                    <div class="panel-body">
                        <div class="ui small form">
                            <div class="two fields">
                                <div class="field">
                                    <label>CATEGORY</label>
                                    @Html.DropDownList("VCat", (IEnumerable<SelectListItem>)ViewBag.VCategory, "--CATEGORY--", new { @class = "ui cg search dropdown" })
                                </div>
                                <div class="field">
                                    <label>GROUP</label>
                                    <select class="" data-bind="options:GroupListEntry,
                                        optionsCaption:'--CATEGORY GROUP--',
                                        optionsText:'GroupName',optionsValue:'Id',
                                        value:'Id'" id="groupDrop" name="groupDrop"></select>
                                </div>
                            </div>
                        </div>


                        <span data-bind="text:Ref"></span>
                        <table style="background-color:#337ab7" id="tablesearchc" data-search="true"
                               data-show-refresh="true"
                               data-pagination="true" data-pagesize="5" data-row-style="rowStyle"
                               data-classes="table table-hover table-condensed table-responsive"
                               data-pagenumber="1" data-sidePagination="true"></table>
                        </div>
                </div>
            </div>
        </div>
        
    </div>

</div>

@section  scripts{
<link href="~/Content/bootstrapTable/bootstrap-table.css" rel="stylesheet" />
<script src="~/Content/bootstrapTable/bootstrap-table.js"></script>
<link href="~/Content/sweetalert2.min.css" rel="stylesheet" />
<script src="~/Scripts/sweetalert2.min.js"></script>
<script src="~/Scripts/knockout-3.4.2.js"></script>
<script src="~/Content/semantic/semantic.min.js"></script>
    <script>
        $(function () {
            var model = new sheetModel();
            ko.applyBindings(model, document.getElementById('koserver'));
            $('.ui.dropdown').dropdown();
            $('.ui.cg.dropdown').dropdown({
                onChange: function (value, text, $element) {
                    model.CategoryGroupList(value);
                }
            });
          
            LoadData($('#Id').val(), model);
            LoadCasuals(model);
            $('#btnCancel').click(function () {
                $('.ui.staff.modal').modal('hide');
            })
        });

        function LoadData(Id,model) {
            var $table = $('#tablex').bootstrapTable({
                showColumns: true,
                url: '/GangAdviceManager/getAdviceItems/?Id=' + Id,
                sortStable: true,
                silentSort: false,
                showToggle: true,
                onCheck: function (row, $element) {
                    model.AddItem(row.StaffCode);
                },
                onUncheck: function (row, $element) {
                    model.RemoveItem(row.StaffCode);
                },
                onCheckAll: function (row) {
                    model.Reset();
                    for (var i = 0; i < row.length; i++) {
                        model.AddItem(row[i].StaffCode);
                    }
                },
                onUncheckAll: function (row) {
                    for (var i = 0; i < row.length; i++) {
                        model.RemoveItem(row[i].StaffCode);
                    }
                },
                columns: [{
                        field: 'state', align: 'center',
                        checkbox:true
                    },
                    {
                        field: 'StaffCode', align: 'left',
                        title: 'STAFF CODE'
                    },
                    {
                        field: 'Name', align: 'left',
                        title: 'NAME'
                    },
                    {
                        field: 'Category', align: 'left',
                        title: 'CATEGORY'
                    },
                    {
                        field: 'GroupName', align: 'left',
                        title: 'GROUP'
                    }]
            });

            $.getJSON('/GangAdviceManager/getAdviceItems/', { Id: Id}, function (data) {
                $table.bootstrapTable('showLoading');
                $table.bootstrapTable('load', data.data);
                $table.bootstrapTable('hideLoading');
                var options = $table.bootstrapTable('getOptions');

                if (options.totalPages > 0) {
                    $table.bootstrapTable('selectPage', options.totalPages);
                }
            });
        }

        function rowStyle(row, index) {
            var classes = ['active', 'success', 'info', 'warning', 'danger'];
            return { classes: 'active' };
        }
        function LoadCasuals(model) {
            var $table = $('#tablesearchc').bootstrapTable({
                showColumns: true,
                url: '/Employee/getData/',
                sortStable: true,
                silentSort: false,
                refresh: function () {
                  //  model.ResetCasual();
                },
                showToggle: false,
                onCheck: function (row, $element)
                {

                    var vm =
                        {
                            HeaderId: $('#Id').val(),
                            Category: $('.ui.cg.dropdown').dropdown('get value'),
                            Group: $('#groupDrop option:selected').val(),
                            StaffCode: row.Code
                        };
                    debugger;
                    model.AddCasualItem(vm);
                },
                onUncheck: function (row, $element)
                {
                    model.RemoveCasualItem(row.Code);
                },
                onCheckAll: function (row)
                {
                   // model.Reset();
                    for (var i = 0; i < row.length; i++)
                    {
                        var vm =
                            {
                                HeaderId: $('#Id').val(),
                                Category: $('.ui.cg.dropdown').dropdown('get value'),
                                Group: $('#groupDrop option:selected').val(),
                                StaffCode: row[i].Code
                            };
                        model.AddCasualItem(vm);
                    }
                },
                onUncheckAll: function (row) {
                    for (var i = 0; i < row.length; i++) {
                        model.RemoveCasualItem(row[i].Code);
                    }
                },
                columns: [
                    {

                        align: 'center',
                        checkbox: true
                    },
                    {
                        field: 'Code', align: 'left',
                        title: 'STAFF ID'
                    },
                    {
                        field: 'Name', align: 'left',
                        title: 'NAME'
                    },
                    {
                        field: 'Branch', align: 'left',
                        title: 'BRANCH'
                    }]
            });

            $.getJSON('/Employee/getData/', {}, function (data) {
                $table.bootstrapTable('showLoading');
                $table.bootstrapTable('load', data.data);
                $table.bootstrapTable('hideLoading');
                var options = $table.bootstrapTable('getOptions');

                if (options.totalPages > 0) {
                    $table.bootstrapTable('selectPage', options.totalPages);
                }
            });
        }

        var sheetModel = function () {
            var self = this;
            self.Employee = ko.observableArray([]);
            self.Casuals = ko.observableArray([]);
            self.Total = ko.observable(0);
            self.Ref = ko.observable('Selected Casuals: 0');
            self.TotalEntries = ko.observable(0);
            self.GroupList = ko.observableArray([]);
            self.GroupListEntry = ko.observableArray([]);

            self.CategoryGroupList = function (Id) {
                $.getJSON('/GangAdviceManager/getAssignedGroups/', { category: Id }, function (data) {

                    self.GroupListEntry(data.data);
                })
            }


            self.AddItem = function (item) {
                self.Employee.push(item);
                self.TotalEntries( self.Employee().length);
            }

            self.RemoveItem = function (item_value) {
                ko.utils.arrayForEach(self.Employee(), function (item) {
                    if (item == item_value) {
                        self.Employee.remove(item);
                        self.TotalEntries(self.Employee().length);
                    }
                })
            }

            self.Reset = function () {
                self.Employee([]); self.TotalEntries(0);
            }

            self.AddRange = function (item) {
                self.Employee.push(item);
                self.TotalEntries(self.Employee().length);
            }
            self.IndexView = function () {
                window.location = '/GangAdviceManager/Index';
            }

            self.LoadEmployee = function () {
                    $('.ui.staff.modal')
                        .modal('setting', {
                            allowMultiple: false,
                            onHidden: function () {
                                LoadData($('#Id').val());
                            },
                            transition: 'vertical flip'
                        }).modal('show');
            }

            self.RemoveSelectedItem = function () {
                if (self.Employee().length > 0) {
                    var result = $('#Id').val();

                    if (result == '' || result == null || result==undefined)
                    {
                        swal('GANG REQUEST MANAGER', 'GANG ADVICE NOT FOUND', 'error');
                        return;
                    }

                 
                    swal({
                        title: 'GANG REQUEST MANAGER',
                        text: "DO YOU WANT TO REMOVE ITEM(S) ?",
                        type: 'info',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Yes, Remove Item(s)',
                        cancelButtonText: 'No, Ignore',
                        confirmButtonClass: 'btn btn-success',
                        cancelButtonClass: 'btn btn-danger',
                        buttonsStyling: false
                    }).then(function () {
                        $('#frmadvice').addClass('loading');

                        $.post('/GangAdviceManager/DeleteGangItems/', { Id: $('#Id').val(), Items: self.Employee() }, function (data) {
                            $('#frmadvice').removeClass('loading');
                            self.Reset();
                            if (data.message == 'success') {
                                LoadData($('#Id').val());
                                swal('GANG REQUEST MANAGER', 'SELECTED ITEMS HAVE BEEN REMOVED', 'success');
                            }
                            else {
                                swal('GANG REQUEST MANAGER', data.message, 'success');
                            }
                        });
                    }, function (dismiss) {
                        if (dismiss === 'cancel') {
                            swal('BATCH POSTING', 'Task Cancelled', 'error');
                        }
                    });
                }
                else {
                    swal('GANG REQUEST MANAGER', 'NO ITEM HAS BEEN SELECTED', 'info');
                }
            }

            ///CASUALS
            self.AddCasualItem = function (item) {
                self.GroupList.push(item);
                self.Total(self.GroupList().length);
                self.Ref('Selected Casuals: ' + self.Total());
                var resullt = self.GroupList();
               
            }

            self.RemoveCasualItem = function (item_value) {
                ko.utils.arrayForEach(self.GroupList(), function (item) {
                    if (item.StaffCode == item_value) {
                        self.GroupList.remove(item);
                        self.Total(self.GroupList().length);
                        self.Ref('Selected Casuals: ' + self.Total());
                    }
                   
                })

               
            }

            self.ResetCasual = function () {
                self.GroupList([]); self.Total(0);
                self.Ref('Selected Casuals: ' + self.Total());
            }

            self.AddCasualRange = function (item) {
                self.GroupList.push(item);
                self.Total(self.GroupList().length);
                self.Ref('Selected Casuals: ' + self.Total());
            }

            self.AddCasualToGangRequest = function () {
                if (self.GroupList().length > 0)
                {
                    if ($('.ui.cg.dropdown').dropdown('get text') == '' || $('.ui.cg.dropdown').dropdown('get text') == undefined || $('.ui.g.dropdown').dropdown('get text') == null) {
                        swal('GANG REQUEST', 'PLEASE SPECIFY GANG CATEGORY', 'info');
                        return;
                    }

                    if ($('#groupDrop option:selected').text() == '--CATEGORY GROUP--' || $('#groupDrop option:selected').val() == null) {
                        swal('GANG REQUEST', 'GANG GROUP HAS NOT BEEN SPECIFIED', 'info');
                        return;
                    }

                    if ($('#groupDrop option:selected').val() == '' || $('#groupDrop option:selected').val() == null) {
                        swal('GANG REQUEST', 'GANG GROUP HAS NOT BEEN SPECIFIED', 'info');
                        return;
                    }
                    var resullt = self.GroupList();
                   
                    $.post('/GangAdviceManager/UpdateGangEntry/', { model: self.GroupList() }, function (data) {
                        if (data.message == 'success')
                        {
                            $('.ui.basic.modal').modal('hide');
                        }
                        else
                        {
                            swal('GANG REQUEST', data.message, 'error');
                        }
                    });
                }
            }
        }
    </script>
    }